{"Book a meeting with Sirish next tuesday at 3pm. Agenda for the meeting is to discuss 2023 plans. Meeting should be 1hr long.": {"code_output": "\n\nfrom api.provided_api import *\n# lowercase names and meeting agenda\nlist_of_names = [\"Sirish\"]\nlist_of_names = [s.lower() for s in list_of_names]\n\nmeeting_summary = \"Discuss 2023 plans\".lower()\n\n# we need to convert the names of the invitees to emails\ninvitee_emails = name_to_emails(list_of_names)\n\n# get date for meeting\nfrom datetime import datetime, timedelta\n\ntoday = datetime.now().date()\ndays_until_tuesday = 2 - today.weekday()\nif days_until_tuesday <= 0: # Target day has passed\n    days_until_tuesday += 7\nnext_tuesday = today + timedelta(days_until_tuesday)\n\n# time for meeting\ntime = timedelta(hours=15)\n\n# duration for meeting\nduration = timedelta(hours=1)\n\n# create the meeting\ncreate_event(\"Discuss 2023 plans\", next_tuesday, time, duration, invitee_emails)\n\n# return created meeting\nanswer = get_events()[-1]", "code_exec": true, "returned_value": {"event_id": "7", "summary": "Discuss 2023 plans", "location": "Online", "description": "This is a new meeting", "start": {"dateTime": "2023-01-25 00:00:00", "timeZone": "America/New_York"}, "end": {"dateTime": "2023-01-25 00:00:00", "timeZone": "America/New_York"}, "attendees": [{"email": "sirish@gmail.com"}], "reminders": {"useDefault": true}}}, "Schedule 30 minutes with ramesh tomorrow at 4:30pm to chat about hiring plans.": {"code_output": "\n\nfrom api.provided_api import *\n# lowercase names and meeting agenda\nlist_of_names = [\"Ramesh\"]\nlist_of_names = [s.lower() for s in list_of_names]\n\nmeeting_summary = \"Chat with Ramesh about hiring plans\".lower()\n\n# we need to convert the names of the invitees to emails\ninvitee_emails = name_to_emails(list_of_names)\n\n# get date for meeting\nfrom datetime import datetime, timedelta\n\ntoday = datetime.now().date()\ntomorrow = today + timedelta(days=1)\n\n# time for meeting\ntime = timedelta(hours=16, minutes=30)\n\n# duration for meeting\nduration = timedelta(minutes=30)\n\n# create the meeting\ncreate_event(\"Chat with Ramesh about hiring plans\", tomorrow, time, duration, invitee_emails)\n\n# return created meeting\nanswer = get_events()[-1]", "code_exec": true, "returned_value": {"event_id": "8", "summary": "Chat with Ramesh about hiring plans", "location": "Online", "description": "This is a new meeting", "start": {"dateTime": "2023-01-19 00:00:00", "timeZone": "America/New_York"}, "end": {"dateTime": "2023-01-19 00:00:00", "timeZone": "America/New_York"}, "attendees": [{"email": "ramesh@gmail.com"}], "reminders": {"useDefault": true}}}, "Setup a follow-up with patrick a week from today for 30mins at 2pm. Need to discuss project updates.": {"code_output": "\n\nfrom api.provided_api import *\n# lowercase names and meeting agenda\nlist_of_names = [\"Patrick\"]\nlist_of_names = [s.lower() for s in list_of_names]\n\nmeeting_summary = \"Follow-up with Patrick\".lower()\n\n# we need to convert the names of the invitees to emails\ninvitee_emails = name_to_emails(list_of_names)\n\n# get date for meeting\nfrom datetime import datetime, timedelta\n\ntoday = datetime.now().date()\ndays_until_next_week = 7 - today.weekday()\nif days_until_next_week <= 0: # Target day has passed\n    days_until_next_week += 7\nnext_week = today + timedelta(days_until_next_week)\n\n# time for meeting\ntime = timedelta(hours=14)\n\n# duration for meeting\nduration = timedelta(minutes=30)\n\n# create the meeting\ncreate_event(\"Follow-up with Patrick\", next_week, time, duration, invitee_emails)\n\n# return created meeting\nanswer = get_events()[-1]", "code_exec": true, "returned_value": {"event_id": "9", "summary": "Follow-up with Patrick", "location": "Online", "description": "This is a new meeting", "start": {"dateTime": "2023-01-23 00:00:00", "timeZone": "America/New_York"}, "end": {"dateTime": "2023-01-23 00:00:00", "timeZone": "America/New_York"}, "attendees": [{"email": "patrick@gmail.com"}], "reminders": {"useDefault": true}}}, "Want to meet asiya to discuss eng roadmap. Can you schedule a 1hr meeting thursday at 11am.": {"code_output": "\n\nfrom api.provided_api import *\n# lowercase names and meeting agenda\nlist_of_names = [\"Asiya\"]\nlist_of_names = [s.lower() for s in list_of_names]\n\nmeeting_summary = \"Discuss Eng Roadmap\".lower()\n\n# we need to convert the names of the invitees to emails\ninvitee_emails = name_to_emails(list_of_names)\n\n# get date for meeting\nfrom datetime import datetime, timedelta\n\ntoday = datetime.now().date()\ndays_until_thursday = 3 - today.weekday()\nif days_until_thursday <= 0: # Target day has passed\n    days_until_thursday += 7\ncoming_thursday = today + timedelta(days_until_thursday)\n\n# time for meeting\ntime = timedelta(hours=11)\n\n# duration for meeting\nduration = timedelta(hours=1)\n\n# create the meeting\ncreate_event(\"Discuss Eng Roadmap\", coming_thursday, time, duration, invitee_emails)\n\n# return created meeting\nanswer = get_events()[-1]", "code_exec": true, "returned_value": {"event_id": "10", "summary": "Discuss Eng Roadmap", "location": "Online", "description": "This is a new meeting", "start": {"dateTime": "2023-01-19 00:00:00", "timeZone": "America/New_York"}, "end": {"dateTime": "2023-01-19 00:00:00", "timeZone": "America/New_York"}, "attendees": [{"email": "asiya@gmail.com"}], "reminders": {"useDefault": true}}}, "Need to give updates on product progress to Paul. I will need a few days to work on this, so schedule 1hr two weeks from today at 10am.": {"code_output": "\n\nfrom api.provided_api import *\n# lowercase names and meeting agenda\nlist_of_names = [\"Paul\"]\nlist_of_names = [s.lower() for s in list_of_names]\n\nmeeting_summary = \"Product progress update\".lower()\n\n# we need to convert the names of the invitees to emails\ninvitee_emails = name_to_emails(list_of_names)\n\n# get date for meeting\nfrom datetime import datetime, timedelta\n\ntoday = datetime.now().date()\ndays_until_two_weeks = 14 - today.weekday()\nif days_until_two_weeks <= 0: # Target day has passed\n    days_until_two_weeks += 14\ntwo_weeks_from_today = today + timedelta(days_until_two_weeks)\n\n# time for meeting\ntime = timedelta(hours=10)\n\n# duration for meeting\nduration = timedelta(hours=1)\n\n# create the meeting\ncreate_event(\"Product progress update\", two_weeks_from_today, time, duration, invitee_emails)\n\n# return created meeting\nanswer = get_events()[-1]", "code_exec": true, "returned_value": {"event_id": "11", "summary": "Product progress update", "location": "Online", "description": "This is a new meeting", "start": {"dateTime": "2023-01-30 00:00:00", "timeZone": "America/New_York"}, "end": {"dateTime": "2023-01-30 00:00:00", "timeZone": "America/New_York"}, "attendees": [{"email": "paul@gmail.com"}], "reminders": {"useDefault": true}}}, "Setup an early 1.5 hr dinner with Roh, Mihir and Sirish tomorrow at 6pm to catch up.": {"code_output": "\n\nfrom api.provided_api import *\n# lowercase names and meeting agenda\nlist_of_names = [\"Roh\", \"Mihir\", \"Sirish\"]\nlist_of_names = [s.lower() for s in list_of_names]\n\nmeeting_summary = \"Dinner with Roh, Mihir and Sirish\".lower()\n\n# we need to convert the names of the invitees to emails\ninvitee_emails = name_to_emails(list_of_names)\n\n# get date for meeting\nfrom datetime import datetime, timedelta\n\ntoday = datetime.now().date()\ntomorrow = today + timedelta(days=1)\n\n# time for meeting\ntime = timedelta(hours=18)\n\n# duration for meeting\nduration = timedelta(hours=1, minutes=30)\n\n# create the meeting\ncreate_event(\"Dinner with Roh, Mihir and Sirish\", tomorrow, time, duration, invitee_emails)\n\n# return created meeting\nanswer = get_events()[-1]", "code_exec": true, "returned_value": {"event_id": "12", "summary": "Dinner with Roh, Mihir and Sirish", "location": "Online", "description": "This is a new meeting", "start": {"dateTime": "2023-01-19 00:00:00", "timeZone": "America/New_York"}, "end": {"dateTime": "2023-01-19 00:00:00", "timeZone": "America/New_York"}, "attendees": [{"email": "roh@gmail.com"}, {"email": "mihir@gmail.com"}, {"email": "sirish@gmail.com"}], "reminders": {"useDefault": true}}}, "Block deep work time 9am-12pm tomorrow to focus on coding for GPT-3 agent.": {"code_output": "\n\nfrom api.provided_api import *\n# lowercase names and meeting agenda\nlist_of_names = []\nlist_of_names = [s.lower() for s in list_of_names]\n\nmeeting_summary = \"Deep work time for GPT-3 agent\".lower()\n\n# we need to convert the names of the invitees to emails\ninvitee_emails = name_to_emails(list_of_names)\n\n# get date for meeting\nfrom datetime import datetime, timedelta\n\ntoday = datetime.now().date()\ntomorrow = today + timedelta(days=1)\n\n# time for meeting\ntime = timedelta(hours=9)\n\n# duration for meeting\nduration = timedelta(hours=3)\n\n# create the meeting\ncreate_event(\"Deep work time for GPT-3 agent\", tomorrow, time, duration, invitee_emails)\n\n# return created meeting\nanswer = get_events()[-1]", "code_exec": true, "returned_value": {"event_id": "13", "summary": "Deep work time for GPT-3 agent", "location": "Online", "description": "This is a new meeting", "start": {"dateTime": "2023-01-19 00:00:00", "timeZone": "America/New_York"}, "end": {"dateTime": "2023-01-19 00:00:00", "timeZone": "America/New_York"}, "attendees": [], "reminders": {"useDefault": true}}}, "Create a 30min meeting for phone interview with Ram, next Wednesday at 3pm.": {"code_output": "\n\nfrom api.provided_api import *\n# lowercase names and meeting agenda\nlist_of_names = [\"Ram\"]\nlist_of_names = [s.lower() for s in list_of_names]\n\nmeeting_summary = \"Phone interview with Ram\".lower()\n\n# we need to convert the names of the invitees to emails\ninvitee_emails = name_to_emails(list_of_names)\n\n# get date for meeting\nfrom datetime import datetime, timedelta\n\ntoday = datetime.now().date()\ndays_until_wednesday = 3 - today.weekday()\nif days_until_wednesday <= 0: # Target day has passed\n    days_until_wednesday += 7\nnext_wednesday = today + timedelta(days_until_wednesday)\n\n# time for meeting\ntime = timedelta(hours=15)\n\n# duration for meeting\nduration = timedelta(minutes=30)\n\n# create the meeting\ncreate_event(\"Phone interview with Ram\", next_wednesday, time, duration, invitee_emails)\n\n# return created meeting\nanswer = get_events()[-1]", "code_exec": true, "returned_value": {"event_id": "14", "summary": "Phone interview with Ram", "location": "Online", "description": "This is a new meeting", "start": {"dateTime": "2023-01-19 00:00:00", "timeZone": "America/New_York"}, "end": {"dateTime": "2023-01-19 00:00:00", "timeZone": "America/New_York"}, "attendees": [{"email": "ram@gmail.com"}], "reminders": {"useDefault": true}}}, "1hr Meeting to discuss Eng roadmap, with Ravi, Asiya, Paul and Roh this Friday at 11am.": {"code_output": "\n\nfrom api.provided_api import *\n# lowercase names and meeting agenda\nlist_of_names = [\"Ravi\", \"Asiya\", \"Paul\", \"Roh\"]\nlist_of_names = [s.lower() for s in list_of_names]\n\nmeeting_summary = \"Discuss Eng roadmap\".lower()\n\n# we need to convert the names of the invitees to emails\ninvitee_emails = name_to_emails(list_of_names)\n\n# get date for meeting\nfrom datetime import datetime, timedelta\n\ntoday = datetime.now().date()\ndays_until_friday = 4 - today.weekday()\nif days_until_friday <= 0: # Target day has passed\n    days_until_friday += 7\nthis_friday = today + timedelta(days_until_friday)\n\n# time for meeting\ntime = timedelta(hours=11)\n\n# duration for meeting\nduration = timedelta(hours=1)\n\n# create the meeting\ncreate_event(\"Discuss Eng roadmap\", this_friday, time, duration, invitee_emails)\n\n# return created meeting\nanswer = get_events()[-1]", "code_exec": true, "returned_value": {"event_id": "15", "summary": "Discuss Eng roadmap", "location": "Online", "description": "This is a new meeting", "start": {"dateTime": "2023-01-20 00:00:00", "timeZone": "America/New_York"}, "end": {"dateTime": "2023-01-20 00:00:00", "timeZone": "America/New_York"}, "attendees": [{"email": "ravi@gmail.com"}, {"email": "asiya@gmail.com"}, {"email": "paul@gmail.com"}, {"email": "roh@gmail.com"}], "reminders": {"useDefault": true}}}, "Book some time, 45 mins, with Roh and Mihir to discuss eng pipeline, next Monday at 3pm.": {"code_output": "\n\nfrom api.provided_api import *\n# lowercase names and meeting agenda\nlist_of_names = [\"Roh\", \"Mihir\"]\nlist_of_names = [s.lower() for s in list_of_names]\n\nmeeting_summary = \"Discuss eng pipeline\".lower()\n\n# we need to convert the names of the invitees to emails\ninvitee_emails = name_to_emails(list_of_names)\n\n# get date for meeting\nfrom datetime import datetime, timedelta\n\ntoday = datetime.now().date()\ndays_until_monday = 0 - today.weekday()\nif days_until_monday <= 0: # Target day has passed\n    days_until_monday += 7\nnext_monday = today + timedelta(days_until_monday)\n\n# time for meeting\ntime = timedelta(hours=15)\n\n# duration for meeting\nduration = timedelta(minutes=45)\n\n# create the meeting\ncreate_event(\"Discuss eng pipeline\", next_monday, time, duration, invitee_emails)\n\n# return created meeting\nanswer = get_events()[-1]", "code_exec": true, "returned_value": {"event_id": "16", "summary": "Discuss eng pipeline", "location": "Online", "description": "This is a new meeting", "start": {"dateTime": "2023-01-23 00:00:00", "timeZone": "America/New_York"}, "end": {"dateTime": "2023-01-23 00:00:00", "timeZone": "America/New_York"}, "attendees": [{"email": "roh@gmail.com"}, {"email": "mihir@gmail.com"}], "reminders": {"useDefault": true}}}}